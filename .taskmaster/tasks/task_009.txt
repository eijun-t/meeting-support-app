# Task ID: 9
# Title: ファイルシステムへのローカルデータ保存
# Status: pending
# Dependencies: 4
# Priority: medium
# Description: 文字起こしされたテキストや要約などのセッションデータを、ユーザーのPCのファイルシステムに直接保存します。
# Details:
1. Node.js `fs`モジュールの利用: ElectronのメインプロセスからNode.jsの`fs`（File System）モジュールを使い、ファイルの読み書きを実装します。
2. 保存ディレクトリの決定: アプリケーションのデータを保存するための標準的な場所（例: `appData`ディレクトリ）を取得し、そこに専用フォルダを作成します。
3. データ形式の設計: 保存するデータ（セッションごとの文字起こし、要約など）をどのような形式（例: JSON, テキストファイル）で、どのようなファイル名で保存するかを設計します。
4. 保存・読込処理の実装: 会議の終了時などにセッションデータをファイルに書き出し、過去のデータを読み込む機能を実装します。

ブラウザのストレージと異なり、PCのファイルシステムに直接アクセスするため、より永続的で大容量のデータ管理が可能になります。

# Test Strategy:
Electronアプリを再起動しても、保存したファイルが指定ディレクトリに存在し、内容が正しく読み書きできることを確認する。保存・読込処理でデータの整合性が保たれていることを検証する。

# Subtasks:
## 1. Node.js fsモジュールの実装 [pending]
### Dependencies: None
### Description: ElectronのメインプロセスからNode.jsのfsモジュールを使用してファイルの読み書き機能を実装する。
### Details:
Electronの特性を活かし、メインプロセスでファイルシステムアクセスを行い、レンダラープロセスとの適切な通信を設計する。

## 2. 保存ディレクトリの設定 [pending]
### Dependencies: 9.1
### Description: アプリケーションデータの保存場所（appDataディレクトリなど）を決定し、専用フォルダを作成する。
### Details:
OS固有の標準的なアプリケーションデータディレクトリを取得し、アプリ専用のフォルダ構造を設計・作成する。

## 3. データ形式の設計 [pending]
### Dependencies: 9.2
### Description: セッションデータ（文字起こし、要約など）の保存形式とファイル名規則を設計する。
### Details:
JSON形式でのデータ構造設計、ファイル名の命名規則（タイムスタンプ含む）、ディレクトリ階層の設計を行う。

## 4. 保存・読込処理の実装 [pending]
### Dependencies: 9.3
### Description: 会議終了時のデータ保存と過去データの読み込み機能を実装する。
### Details:
非同期処理でのファイル操作、エラーハンドリング、データの整合性チェックを含む保存・読込ロジックを実装する。

