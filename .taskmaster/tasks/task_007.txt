# Task ID: 7
# Title: ファイルシステムへのローカルデータ保存
# Status: pending
# Dependencies: 4, 5
# Priority: medium
# Description: 文字起こしされたテキストや要約などのセッションデータを、ユーザーのPCのファイルシステムに直接保存します。
# Details:
1. Node.js `fs`モジュールの利用: ElectronのメインプロセスからNode.jsの`fs`（File System）モジュールを使い、ファイルの読み書きを実装します。
2. 保存ディレクトリの決定: アプリケーションのデータを保存するための標準的な場所（例: `appData`ディレクトリ）を取得し、そこに専用フォルダを作成します。
3. データ形式の設計: 保存するデータ（セッションごとの文字起こし、要約など）をどのような形式（例: JSON, テキストファイル）で、どのようなファイル名で保存するかを設計します。
4. 保存・読込処理の実装: 会議の終了時などにセッションデータをファイルに書き出し、過去のデータを読み込む機能を実装します。

ブラウザのストレージと異なり、PCのファイルシステムに直接アクセスするため、より永続的で大容量のデータ管理が可能になります。

# Test Strategy:
Electronアプリを再起動しても、保存したファイルが指定ディレクトリに存在し、内容が正しく読み書きできることを確認する。保存・読込処理でデータの整合性が保たれていることを検証する。

# Subtasks:
## 1. 保存ディレクトリの決定と作成 [pending]
### Dependencies: None
### Description: ElectronのAPIを使い、ユーザーの`appData`ディレクトリなど標準的な保存場所を取得し、アプリ専用のサブディレクトリを作成する。
### Details:
Electronの`app.getPath('userData')`や`app.getPath('appData')`を利用し、アプリ用の保存先ディレクトリを決定・作成する。既存ディレクトリがなければ`fs.mkdirSync`等で作成する。

## 2. データ形式とファイル命名規則の設計 [pending]
### Dependencies: 7.1
### Description: セッションごとのデータ（文字起こし、要約など）をどのような形式（例: JSON, テキストファイル）で、どのようなファイル名で保存するかを設計する。
### Details:
データの構造や拡張性を考慮し、JSON形式を基本とする。ファイル名はセッションIDや日時を含めて一意に決定する。

## 3. ファイルへの保存処理の実装 [pending]
### Dependencies: 7.2
### Description: Node.jsの`fs`モジュールを使い、セッションデータをファイルに書き出す処理を実装する。
### Details:
会議終了時などに、設計した形式・命名規則に従い、データをファイルとして保存する。`fs.writeFileSync`や`fs.promises.writeFile`を利用。

## 4. ファイルからの読込処理の実装 [pending]
### Dependencies: 7.3
### Description: 保存済みのセッションデータファイルを読み込み、アプリ内で利用できるようにパースする処理を実装する。
### Details:
`fs.readFileSync`や`fs.promises.readFile`でファイルを読み込み、JSON.parse等でデータを復元する。

## 5. データ永続性と整合性の検証 [pending]
### Dependencies: 7.4
### Description: Electronアプリを再起動しても、保存したファイルが指定ディレクトリに存在し、内容が正しく読み書きできることを確認する。
### Details:
保存・読込処理でデータの整合性が保たれていることを検証する。ファイル破損や読み込みエラー時の例外処理も確認する。

